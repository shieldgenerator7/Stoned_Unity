// Upgrade NOTE: replaced 'mul(UNITY_MATRIX_MVP,*)' with 'UnityObjectToClipPos(*)'



//2018-05-24: generated by Unity
//2018-05-24: pieces copied from https://gamedev.stackexchange.com/questions/92538/explaining-unity-sprite-default-shader
				
Shader "SG7/RockTextureShader"
{
	Properties
	{
		[PerRendererData] _MainTex ("Sprite Texture", 2D) = "white" {}
		_Color ("Tint", Color) = (1,1,1,1)
		_PatternTex ("Pattern Texture", 2D) = "white" {}
		_FilterColor ("Filter Color", Color) = (1,1,1,1)
		_FilterThreshold ("Filter Threshold", float) = 0.1
	}
	SubShader
	{
		Tags
        { 
            "Queue"="Transparent" 
            "IgnoreProjector"="True" 
            "RenderType"="Transparent" 
            "PreviewType"="Plane"
            "CanUseSpriteAtlas"="True"
        }

		Cull Off
        Lighting Off
        ZWrite Off
        Fog { Mode Off }
        Blend One OneMinusSrcAlpha

		Pass
		{
			CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag
			
			#include "UnityCG.cginc"

			float4 _MainTex_TexelSize;
			float4 _PatternTex_TexelSize;

			struct appdata
			{
				float4 vertex : POSITION;
				float4 color : COLOR;
				float2 uv : TEXCOORD0;
			};

			struct v2f
			{
				float2 uv : TEXCOORD0;
				fixed4 color: COLOR;
				float4 vertex : SV_POSITION;
			};

			fixed4 _Color;

			v2f vert (appdata IN)
			{
				v2f OUT;
                OUT.vertex = UnityObjectToClipPos(IN.vertex);
                OUT.uv = IN.uv;
                OUT.color = IN.color * _Color;

                return OUT;
			}

			float modFunction(float number, float divisor){
				//2018-05-24: copied from an answer by Nicol Bolas: https://stackoverflow.com/questions/35155598/unable-to-use-in-glsl
				return (number - (divisor * floor(number/divisor)));
			}
			float modFunction100(float number, float divisor){
				return modFunction(number*100,divisor*100)/100;
			}
			
			fixed4 _FilterColor;
			float _FilterThreshold;

			bool colorEqual(fixed4 a, fixed4 b){
				return
					abs(a.x - b.x) < _FilterThreshold
					&& abs(a.y - b.y) < _FilterThreshold
					&& abs(a.z - b.z) < _FilterThreshold;
			}

			sampler2D _MainTex;
			sampler2D _PatternTex;

			fixed4 frag (v2f i) : SV_Target
			{
				fixed4 curColor = tex2D(_MainTex, i.uv);
				fixed4 col = curColor * i.color;
				if (colorEqual(curColor, _FilterColor)){
					col = curColor * i.color
						* tex2D(_PatternTex, 
							float2(
								modFunction(i.uv.x*_MainTex_TexelSize.z,_PatternTex_TexelSize.z) *_PatternTex_TexelSize.x,
								modFunction(i.uv.y*_MainTex_TexelSize.w,_PatternTex_TexelSize.w) *_PatternTex_TexelSize.y
							)
						);
				}
				col.rgb *= col.a;
				return col;
			}
			
			ENDCG
		}
	}
}
